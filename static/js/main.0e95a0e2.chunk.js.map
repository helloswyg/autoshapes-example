{"version":3,"sources":["components/App/App.module.css","components/Hero/Hero.module.css","components/Header/Header.tsx","components/Footer/Footer.tsx","lib/shapelib/core.ts","lib/shapelib/ShapeComponent.tsx","lib/shapelib/utils.ts","lib/shapelib/library.ts","components/Hero/Hero.tsx","components/Section/Section.tsx","components/App/App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["module","exports","Header","className","Footer","ShapeKind","defaultShapeProps","kind","CLOSED","complexity","smoothness","variability","seed","defaultDrawShapeProps","fill","color","opacity","stroke","width","transform","drawShape","params","allParams","pathArray","LOOPY","WAVY","library","loopyLine","numElements","baseRadius","closedPath","numPoints","PathArray","getShape","draw","SVG","addTo","element","size","path","filledPath","bbox","bboxExpanded","x","y","margin","height","viewbox","e","ShapeComponent","props","refToDiv","useRef","useEffect","current","ref","textContent","style","zIndex","flip","how","flattenedArray","flat","numberCounter","index","length","flipY","scale","factor","value","small","big","pathCompose","segments","output","forEach","segment","flattenedOutput","flattenedSegment","concat","loopSegment","reverseLoopSegment","curveSegment90","reverseCurveSegment90","curveSegment45","reverseCurveSegment45","connectorSegment","reverseConnectorSegment","horizontalrSegment","basicBlocks","loop","crest","connector","twistConnector","drop","flipX","compositeShapes","nPointRadial","radialDistances","offset","numSegments","i","d","Math","sin","PI","cos","controlPointX","controlPointY","rng","seedrandom","radii","Array","blob2","blob3","blob4","blob5","closedShapes","shapeProps","Hero","title","subTitle","buttons","lineColor","styles","heroOuterDiv","position","maxWidth","marginTop","Typography","variant","Section","Box","display","justifyContent","alignItems","minHeight","App","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","typography","h1","fontSize","h2","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,aAAe,6B,gxBCD1B,SAASC,IACd,OAAO,qBAAKC,UAAU,WCDjB,SAASC,IACd,OAAO,qBAAKD,UAAU,WAGTC,ICDHC,E,gCAAAA,O,eAAAA,I,iBAAAA,I,oBAAAA,M,KA2BL,IAAMC,EAA0C,CACrDC,KAAMF,EAAUG,OAChBC,WAAY,EACZC,WAAY,EACZC,YAAa,EACbC,KAAM,GASKC,EAAqB,2BAAQP,GANa,CACrDQ,KAAM,CAAEC,MAAO,OAAQC,QAAS,GAChCC,OAAQ,CAAEF,MAAO,QAASG,MAAO,EAAGF,QAAS,IAC7CG,UAAW,KAqCN,SAASC,EAAUC,GACxB,IAAMC,EAAoC,2BAAQT,GAA0BQ,GACtEE,EAlCD,SAAkBF,GACvB,IAAMC,EAA+B,2BAAQhB,GAAsBe,GACnE,OAAQC,EAAUf,MAChB,KAAKF,EAAUmB,MAQf,KAAKnB,EAAUoB,KAEb,OAAOC,EAAQC,UAAU,CACvBC,YAAaN,EAAUb,WACvBE,YAAaW,EAAUX,YACvBD,WAAYY,EAAUZ,WACtBmB,WAAY,MAEhB,KAAKxB,EAAUG,OACb,OAAOkB,EAAQI,WAAW,CACxBC,UAAWT,EAAUb,WACrBE,YAAaW,EAAUX,YACvBD,WAAYY,EAAUZ,WACtBmB,WAAY,MAKlB,OAAO,IAAIG,IAKOC,CAASX,GACrBY,EAAYC,cAAMC,MAAMd,EAAUe,SAASC,KAAK,OAAQ,QAC1DC,EAAOL,EAAKK,KAAKhB,GACjBiB,EAAaD,EAIfC,GADSlB,EAAUR,KACNyB,EAAKzB,KAAKQ,EAAUR,OAKjCyB,GADSjB,EAAUL,OACZuB,EAAWvB,OAAOK,EAAUL,SAMrC,IACE,IAAMwB,EAAOF,EAAKE,OAEZC,EAAe,CACnBC,EAAGF,EAAKE,EAFK,EAGbC,EAAGH,EAAKG,EAHK,EAIb1B,MAAOuB,EAAKvB,MAAQ2B,EACpBC,OAAQL,EAAKK,OAASD,GAExBX,EAAKa,QAAL,eAAkBL,IAClB,MAAOM,IAIT,OAAOT,EC3GF,IAAMU,EAAiB,SAACC,GAC7B,IAAMC,EAAWC,iBAAO,MAUxB,OARAC,qBAAU,WACR,GAAIF,EAASG,QAAS,CACpB,IAAMC,EAAMJ,EAASG,QACrBC,EAAIC,YAAc,GAClBpC,EAAU,aAAEiB,QAASkB,GAAQL,QAI1B,iCAAKK,IAAKJ,EAAUM,MAAO,CAAEvC,MAAO,OAAQ4B,OAAQ,OAAQY,QAAS,IAASR,K,iBCGhF,SAASS,EAAKpC,EAAsBqC,GAIzC,IAHA,IAAIC,EAAiBtC,EAAUuC,OAC3BC,EAAgB,EAEXC,EAAQ,EAAGA,EAAQH,EAAeI,OAAQD,IAAS,CAC1D,IAAM3B,EAAUwB,EAAeG,GACR,kBAAZ3B,IACG,MAARuB,IAEFC,EAAeG,GAASD,EAAgB,IAAM,EAAI1B,GAAWA,GAEnD,MAARuB,IAEFC,EAAeG,GAASD,EAAgB,IAAM,EAAI1B,GAAWA,GAE/D0B,GAAiB,GAGrB,OAAO,IAAI/B,IAAU6B,GAGhB,SAASK,EAAM3C,GACpB,OAAOoC,EAAKpC,EAAW,KAWlB,SAAS4C,EAAM5C,EAAsB6C,GAG1C,IADA,IAAIP,EAAiBtC,EAAUuC,OACtBE,EAAQ,EAAGA,EAAQH,EAAeI,OAAQD,IAAS,CAC1D,IAAMK,EAAQR,EAAeG,GACR,kBAAVK,IACTR,EAAeG,GAASK,EAAQD,GAGpC,OAAO,IAAIpC,IAAU6B,GAGhB,SAASS,EAAM/C,GACpB,OAAO4C,EAAM5C,EAAW,IAGnB,SAASgD,EAAIhD,GAClB,OAAO4C,EAAM5C,EAAW,GAgBnB,SAASiD,EAAYC,GAK1B,IAAIC,EAAS,IAAI1C,IAwBjB,MAvB8B,MAA1ByC,EAAS,GAAGX,OAAO,KACrBY,EAASA,EAAS,IAAI1C,IAAU,UAGlCyC,EAASE,SAAQ,SAACC,GAChB,IAAMC,EAAkBH,EAAOZ,OAC3BgB,EAAmBF,EAAQd,OACzBnB,EAAIkC,EAAgBA,EAAgBZ,OAAS,GAC7CrB,EAAIiC,EAAgBA,EAAgBZ,OAAS,GAC/CF,EAAgB,EAEpB,GAAiB,kBAANpB,GAA+B,kBAANC,EAAgB,OAAO8B,EAC3D,IAAK,IAAIV,EAAQ,EAAGA,EAAQc,EAAiBb,OAAQD,IAAS,CAC5D,IAAM3B,EAAUyC,EAAiBd,GACV,kBAAZ3B,IAETyC,EAAiBd,GAAS3B,GAAW0B,EAAgB,IAAM,EAAIpB,EAAIC,GACnEmB,GAAiB,GAGrBW,EAASA,EAAOK,OAAO,IAAI/C,IAAU8C,OAGhCJ,EC1GT,IDwCuBnD,ECxCjByD,EAAc,IAAIhD,IAAU,wBAC5BiD,EAAqB,IAAIjD,IAAU,sBACnCkD,EAAiB,IAAIlD,IAAU,yBAC/BmD,EAAwB,IAAInD,IAAU,yBACtCoD,EAAiB,IAAIpD,IAAU,yBAC/BqD,EAAwB,IAAIrD,IAAU,yBACtCsD,EAAmB,IAAItD,IAAU,wBACjCuD,EAA0B,IAAIvD,IAAU,sBACxCwD,EAAqB,IAAIxD,IAAU,oBAE5ByD,EAA2B,CACtCT,cACAC,qBACAG,iBACAC,wBACAH,iBACAC,wBACAG,mBACAC,0BACAC,sBAMWE,EAAOlB,EAAY,CAC9BY,EACAJ,GDaqBzD,ECZd0D,EDaAtB,EAAKA,EAAKpC,EAAW,KAAM,MCZlC2C,EAAMmB,KAEKM,EAAQnB,EAAY,CAACY,EAAgBlB,EAAMmB,KAC3CO,EAAYpB,EAAY,CAACc,EAAkBpB,EAAMqB,KACjDM,EAAiBrB,EAAY,CAACc,EAAkBC,IAChDO,EAAOtB,EAAY,CAC9BU,EDCK,SAAe3D,GACpB,OAAOoC,EAAKpC,EAAW,KCDvBwE,CAAMf,GACNV,EAAMA,EAAMkB,IACZtB,EAAMe,GACNf,EAAMiB,KAGKa,EAA+B,CAC1CN,OACAC,QACAC,YACAC,iBACAC,QAUK,SAASnE,EAAUN,GAExB,OAAOmD,EAAY,CACjB,IAAIxC,IAAU,CAAC,UACfsC,EAAMJ,EAAMyB,IACZE,EACAvB,EAAMoB,GACNnB,EAAIL,EAAMwB,IACVE,IAQG,SAASK,EAAaC,GAO3B,IALA,IACMC,EAAc,IAAdA,EAAsB,IACxBzB,EAAS,IAAI1C,IAAU,CAAC,IAAKmE,EAAUA,EAAWD,EAAgB,KAChEE,EAAcF,EAAgBjC,OAE3BoC,EAAI,EAAGA,EAAIH,EAAgBjC,OAAS,EAAGoC,IAAK,CACnD,IAAMC,EAAIJ,EAAgBG,EAAID,GACxBzD,EAAI2D,EAAIC,KAAKC,IAAS,EAAJH,EAAQE,KAAKE,GAAML,GAAeD,EACpDvD,EAAI0D,EAAIC,KAAKG,IAAS,EAAJL,EAAQE,KAAKE,GAAML,GAAeD,EAGpDQ,EAAgBhE,GAFR4D,KAAKG,IAAS,EAAJL,EAAQE,KAAKE,GAAML,GAAeE,EAAKF,EAT9C,EAYXQ,EAAgBhE,EAFT2D,KAAKC,IAAS,EAAJH,EAAQE,KAAKE,GAAML,GAAeE,EAAKF,EAV7C,EAef1B,EADQ,IAAN2B,EACO3B,EAAOK,OAAO,CACrB,IACA,GAAKoB,EACLD,EAAgB,GAAKC,EACrBQ,EACAC,EACAjE,EACAC,IAGO8B,EAAOK,OAAO,CAAC,IAAK4B,EAAeC,EAAejE,EAAGC,IAMlE,OAFA8B,EAASA,EAAOK,OAAO,CAAC,MAYnB,SAASjD,EAAWT,GAIzB,IAFA,IAAMwF,EAAMC,IAAW,eACjBC,EAAQ,IAAIC,MAAM3F,EAAOU,WACtBsE,EAAI,EAAGA,EAAIhF,EAAOU,UAAWsE,IACpCU,EAAMV,GAAKhF,EAAOQ,YAAcgF,IAAQ,IAAOxF,EAAOV,YAExD,OAAOsF,EAAac,GAGf,IAAME,EAAQhB,EAAa,CAAC,GAAI,KAC1BiB,EAAQjB,EAAa,CAAC,GAAI,GAAI,KAC9BkB,EAAQlB,EAAa,CAAC,GAAI,GAAI,GAAI,KAClCmB,EAAQnB,EAAa,CAAC,GAAI,GAAI,GAAI,IAAK,KAEvCoB,EAA4B,CACvCJ,QACAC,QACAC,QACAC,S,oBCnIIE,GAAa,CACjB/G,KAAMF,EAAUmB,MAChBf,WAAY,EACZQ,OAAQ,CAAEF,MAAO,UAAWG,MAAO,IAGxBqG,GAAO,SAAC,GAAuF,IAArFC,EAAoF,EAApFA,MAAOC,EAA6E,EAA7EA,SAA6E,IAAnEC,eAAmE,MAAzD,GAAyD,MAArDC,iBAAqD,MAAzCL,GAAWrG,OAAOF,MAAuB,EAEzG,OADAuG,GAAWrG,OAAOF,MAAQ4G,EAExB,sBAAKxH,UAAWyH,KAAOC,aAAvB,UACE,cAAC,EAAD,2BAAoBP,IAApB,IAAgC7D,MAAO,CAAEqE,SAAU,WAAYC,SAAU,MAAOC,UAAW,WAC3F,sBAAKvE,MAAO,CAAEZ,OAAQ,OAAtB,UACE,cAACoF,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BV,IAC1B,cAACS,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0BT,IAC1B,mCAAGC,W,SCxBES,GAAU,SAACjF,GAAD,OACrB,cAACkF,GAAA,EAAD,aAAKC,QAAQ,OAAOC,eAAe,SAASC,WAAW,SAASC,UAAU,QAAQT,SAAS,UAAa7E,KCwB3FuF,OApBf,WACE,OACE,sBAAKtI,UAAWyH,IAAOc,IAAvB,UACE,cAACxI,EAAD,IACA,cAAC,GAAD,UACE,cAAC,GAAD,CACEsH,MAAO,4DACPC,SACE,gFAC0C,uBAD1C,4BAMN,cAACrH,EAAD,Q,SCPSuI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCPDQ,GAAQC,aAAY,CAC/BC,WAAY,CACVC,GAAI,CACFC,SAAU,QAEZC,GAAI,CACFD,SAAU,SAGdE,QAAS,CACPC,QAAS,CAEPC,KAAM,WAIRC,UAAW,CACTC,MAAO,UACPF,KAAM,UAENG,aAAc,WAIhBC,kBAAmB,EAInBC,YAAa,MCtBjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,GAAA,EAAD,CAAejB,MAAOA,GAAtB,SACE,cAAC,GAAD,QAGJkB,SAASC,eAAe,SAM1B5B,O","file":"static/js/main.0e95a0e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heroOuterDiv\":\"Hero_heroOuterDiv__OEvcs\"};","export function Header() {\n  return <div className=\"header\"></div>;\n}\n","export function Footer() {\n  return <div className=\"footer\"></div>;\n}\n\nexport default Footer;\n","import { FillData, MatrixAlias, PathArray, StrokeData, SVG, Svg } from '@svgdotjs/svg.js';\nimport { library } from '.';\n\nexport enum ShapeKind {\n  WAVY,\n  LOOPY,\n  CLOSED,\n}\n\nexport interface ShapeProps {\n  kind: ShapeKind;\n  complexity?: number;\n  smoothness?: number;\n  variability?: number;\n  seed?: number;\n}\n\nexport type StyleProps = {\n  fill?: FillData | string;\n  stroke?: StrokeData | string;\n  // gradient?: { type: string; block?: (stop: Gradient) => void };\n  transform?: MatrixAlias;\n};\n\nexport type Element = {\n  element: HTMLElement | string;\n};\n\nexport type DrawShapeParams = Element & ShapeProps & StyleProps;\n\nexport const defaultShapeProps: Required<ShapeProps> = {\n  kind: ShapeKind.CLOSED,\n  complexity: 4,\n  smoothness: 1,\n  variability: 1,\n  seed: 1,\n};\n\nexport const defaultStyleProps: Required<StyleProps> = {\n  fill: { color: '#000', opacity: 0.0 },\n  stroke: { color: 'black', width: 3, opacity: 0.8 },\n  transform: {},\n};\n\nexport const defaultDrawShapeProps = { ...defaultShapeProps, ...defaultStyleProps };\n\nexport function getShape(params: ShapeProps) {\n  const allParams: Required<ShapeProps> = { ...defaultShapeProps, ...params };\n  switch (allParams.kind) {\n    case ShapeKind.LOOPY:\n      // TODO: make loopy line procedural\n      return library.loopyLine({\n        numElements: allParams.complexity,\n        variability: allParams.variability,\n        smoothness: allParams.smoothness,\n        baseRadius: 100,\n      });\n    case ShapeKind.WAVY:\n      // TODO: implemeny wavy line\n      return library.loopyLine({\n        numElements: allParams.complexity,\n        variability: allParams.variability,\n        smoothness: allParams.smoothness,\n        baseRadius: 100,\n      });\n    case ShapeKind.CLOSED:\n      return library.closedPath({\n        numPoints: allParams.complexity,\n        variability: allParams.variability,\n        smoothness: allParams.smoothness,\n        baseRadius: 100,\n      });\n    default:\n      break;\n  }\n  return new PathArray();\n}\n\nexport function drawShape(params: DrawShapeParams) {\n  const allParams: Required<DrawShapeParams> = { ...defaultDrawShapeProps, ...params };\n  const pathArray = getShape(allParams as ShapeProps);\n  const draw: Svg = SVG().addTo(allParams.element).size('100%', '100%');\n  let path = draw.path(pathArray);\n  let filledPath = path;\n\n  // some verbose language to be allowed to use overloaded \"fill\" function with union types\n  if (typeof allParams.fill === 'string') {\n    filledPath = path.fill(allParams.fill as string);\n  } else {\n    filledPath = path.fill(allParams.fill as FillData);\n  }\n  if (typeof allParams.stroke === 'string') {\n    path = filledPath.stroke(allParams.stroke as string);\n  } else {\n    path = filledPath.stroke(allParams.stroke as StrokeData);\n  }\n\n  // set viewport for svg to bounding box + margin\n  try {\n    const bbox = path.bbox();\n    const margin = 4;\n    const bboxExpanded = {\n      x: bbox.x - margin,\n      y: bbox.y - margin,\n      width: bbox.width + margin * 2,\n      height: bbox.height + margin * 2,\n    };\n    draw.viewbox({ ...bboxExpanded });\n  } catch (e) {\n    //TODO: do something to get an alternative bounding box\n  }\n\n  return path;\n}\n","import { useEffect, useRef, BaseHTMLAttributes } from 'react';\nimport { drawShape, ShapeProps, StyleProps } from './core';\n\ntype ShapeComponentProps = ShapeProps & StyleProps & BaseHTMLAttributes<HTMLDivElement>;\n\nexport const ShapeComponent = (props: ShapeComponentProps) => {\n  const refToDiv = useRef(null);\n\n  useEffect(() => {\n    if (refToDiv.current) {\n      const ref = refToDiv.current as HTMLElement;\n      ref.textContent = '';\n      drawShape({ element: ref, ...props });\n    }\n  });\n\n  return <div ref={refToDiv} style={{ width: '100%', height: '100%', zIndex: -1 }} {...props} />;\n};\n","import { Path, PathArray, PointArray, Svg, SVG } from '@svgdotjs/svg.js';\n\nexport function smooth(pathArray: PathArray): PathArray {\n  let flattenedArray = pathArray.flat();\n  if (flattenedArray[0] === 'S') {\n    return pathArray;\n  }\n  if (flattenedArray[0] === 'M') {\n    flattenedArray = flattenedArray.slice(3);\n  }\n  if (flattenedArray[0] === 'C') {\n    flattenedArray = flattenedArray.slice(2);\n    flattenedArray[0] = 'S';\n  } else {\n    throw new Error('Only cubic bezier curves are supported');\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function flip(pathArray: PathArray, how: 'x' | 'y'): PathArray {\n  let flattenedArray = pathArray.flat();\n  let numberCounter = 0;\n\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const element = flattenedArray[index];\n    if (typeof element === 'number') {\n      if (how === 'y') {\n        // if element is at an even-numbered position it's an x coordidante otherwise a y coordinate\n        flattenedArray[index] = numberCounter % 2 === 0 ? element : -element;\n      }\n      if (how === 'x') {\n        // if element is at an even-numbered position it's an x coordidante otherwise a y coordinate\n        flattenedArray[index] = numberCounter % 2 === 1 ? element : -element;\n      }\n      numberCounter += 1;\n    }\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function flipY(pathArray: PathArray): PathArray {\n  return flip(pathArray, 'y');\n}\n\nexport function flipX(pathArray: PathArray): PathArray {\n  return flip(pathArray, 'x');\n}\n\nexport function flipXY(pathArray: PathArray): PathArray {\n  return flip(flip(pathArray, 'x'), 'y');\n}\n\nexport function scale(pathArray: PathArray, factor: number): PathArray {\n  // scale path relative to 0,0 means we simply multiply all numbers by factor\n  let flattenedArray = pathArray.flat();\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const value = flattenedArray[index];\n    if (typeof value === 'number') {\n      flattenedArray[index] = value * factor;\n    }\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function small(pathArray: PathArray): PathArray {\n  return scale(pathArray, 0.5);\n}\n\nexport function big(pathArray: PathArray): PathArray {\n  return scale(pathArray, 2.0);\n}\n\nexport function toPointArray(pathArray: PathArray): PointArray {\n  let flattenedArray = pathArray.flat();\n  let output: number[] = [];\n\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const element = flattenedArray[index];\n    if (typeof element === 'number') {\n      output = output.concat(element);\n    }\n  }\n  return new PointArray(output);\n}\n\nexport function pathCompose(segments: PathArray[]): PathArray {\n  // we assume that the last two numbers in a path segment are the end point of the path so far.\n  // That end point will be the starting point of the next segment.\n  // each segment is encoded as if starting at 0,0 so the segment has to be translated to new coordinates before appending.\n\n  let output = new PathArray();\n  if (segments[0].flat()[0] !== 'M') {\n    output = output = new PathArray('M 0 0');\n  }\n\n  segments.forEach((segment) => {\n    const flattenedOutput = output.flat();\n    let flattenedSegment = segment.flat();\n    const x = flattenedOutput[flattenedOutput.length - 2];\n    const y = flattenedOutput[flattenedOutput.length - 1];\n    let numberCounter = 0;\n\n    if (typeof x !== 'number' || typeof y !== 'number') return output;\n    for (let index = 0; index < flattenedSegment.length; index++) {\n      const element = flattenedSegment[index];\n      if (typeof element === 'number') {\n        // if element is at an even-numbered position it's an x coordidante otherwise a y coordinate\n        flattenedSegment[index] = element + (numberCounter % 2 === 0 ? x : y);\n        numberCounter += 1;\n      }\n    }\n    output = output.concat(new PathArray(flattenedSegment)) as PathArray;\n  });\n\n  return output;\n}\n\nexport function quickDrawPath(elementID: string, pathArray: PathArray): Path {\n  const draw: Svg = SVG().addTo(elementID).size('100%', '100%');\n  const path = draw.path(pathArray).fill('none').stroke({ color: '#000', width: 3 });\n  return path;\n}\n","import { PathArray } from '@svgdotjs/svg.js';\nimport seedrandom from 'seedrandom';\nimport { pathCompose, flipY, flipX, flipXY, small, big } from './utils';\nexport type pathLibrary = { [key: string]: PathArray };\n\n////////////////////////////////////////////////////////////////////////////////////\n// basic blocks\n////////////////////////////////////////////////////////////////////////////////////\nconst loopSegment = new PathArray('C 25 50 25 100 0 100');\nconst reverseLoopSegment = new PathArray('C 25 0 25 50 0 100');\nconst curveSegment90 = new PathArray('C 50 0 100 50 100 100');\nconst reverseCurveSegment90 = new PathArray('C 0 50 50 100 100 100');\nconst curveSegment45 = new PathArray('C 50 25 75 50 100 100');\nconst reverseCurveSegment45 = new PathArray('C 25 50 50 75 100 100');\nconst connectorSegment = new PathArray('C 50 25 90 25 100 25');\nconst reverseConnectorSegment = new PathArray('C 10 0 50 0 100 25');\nconst horizontalrSegment = new PathArray('C 25 0 25 0 25 0');\n\nexport const basicBlocks: pathLibrary = {\n  loopSegment,\n  reverseLoopSegment,\n  curveSegment45,\n  reverseCurveSegment45,\n  curveSegment90,\n  reverseCurveSegment90,\n  connectorSegment,\n  reverseConnectorSegment,\n  horizontalrSegment,\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n// composite shapes\n////////////////////////////////////////////////////////////////////////////////////\nexport const loop = pathCompose([\n  curveSegment45,\n  loopSegment,\n  flipXY(reverseLoopSegment),\n  flipY(reverseCurveSegment45),\n]);\nexport const crest = pathCompose([curveSegment45, flipY(reverseCurveSegment45)]);\nexport const connector = pathCompose([connectorSegment, flipY(reverseConnectorSegment)]);\nexport const twistConnector = pathCompose([connectorSegment, reverseConnectorSegment]);\nexport const drop = pathCompose([\n  curveSegment90,\n  flipX(loopSegment),\n  small(small(horizontalrSegment)),\n  flipY(reverseLoopSegment),\n  flipY(reverseCurveSegment90),\n]);\n\nexport const compositeShapes: pathLibrary = {\n  loop,\n  crest,\n  connector,\n  twistConnector,\n  drop,\n};\n\nexport interface LoopyLineParams {\n  numElements: number;\n  variability: number;\n  smoothness: number;\n  baseRadius: number;\n}\n\nexport function loopyLine(params: LoopyLineParams): PathArray {\n  // TODO: make loopy line procedural\n  return pathCompose([\n    new PathArray(['M 0 0']),\n    small(flipY(crest)),\n    twistConnector,\n    small(loop),\n    big(flipY(loop)),\n    connector,\n  ]);\n}\n\n////////////////////////////////////////////////////////////////////////////////////\n// closed shapes\n////////////////////////////////////////////////////////////////////////////////////\n\nexport function nPointRadial(radialDistances: number[]): PathArray {\n  // TODO: implement smoothness\n  const smoothness = 4;\n  const offset = { x: 100, y: 100 };\n  let output = new PathArray(['M', offset.x, offset.y + radialDistances[0]]);\n  const numSegments = radialDistances.length;\n\n  for (let i = 1; i < radialDistances.length + 1; i++) {\n    const d = radialDistances[i % numSegments];\n    const x = d * Math.sin((i * 2 * Math.PI) / numSegments) + offset.x;\n    const y = d * Math.cos((i * 2 * Math.PI) / numSegments) + offset.y;\n    const dX = ((-Math.cos((i * 2 * Math.PI) / numSegments) * d) / numSegments) * smoothness;\n    const dY = ((Math.sin((i * 2 * Math.PI) / numSegments) * d) / numSegments) * smoothness;\n    const controlPointX = x + dX;\n    const controlPointY = y + dY;\n\n    if (i === 1) {\n      output = output.concat([\n        'C',\n        20 + offset.x,\n        radialDistances[0] + offset.y,\n        controlPointX,\n        controlPointY,\n        x,\n        y,\n      ]) as PathArray;\n    } else {\n      output = output.concat(['S', controlPointX, controlPointY, x, y]) as PathArray;\n    }\n  }\n\n  output = output.concat(['z']) as PathArray;\n\n  return output;\n}\n\nexport interface ClosedPathParams {\n  numPoints: number;\n  variability: number;\n  smoothness: number;\n  baseRadius: number;\n}\n\nexport function closedPath(params: ClosedPathParams): PathArray {\n  // TODO: implement smoothness\n  const rng = seedrandom('seed string');\n  const radii = new Array(params.numPoints);\n  for (let i = 0; i < params.numPoints; i++) {\n    radii[i] = params.baseRadius + (rng() - 0.5) * params.variability;\n  }\n  return nPointRadial(radii);\n}\n\nexport const blob2 = nPointRadial([75, 75]);\nexport const blob3 = nPointRadial([75, 75, 20]);\nexport const blob4 = nPointRadial([75, 75, 20, 90]);\nexport const blob5 = nPointRadial([75, 75, 20, 100, 25]);\n\nexport const closedShapes: pathLibrary = {\n  blob2,\n  blob3,\n  blob4,\n  blob5,\n};\n","import { Typography } from '@mui/material';\nimport { ReactNode } from 'react';\nimport { ShapeComponent, ShapeKind } from '../../lib/shapelib';\nimport styles from './Hero.module.css';\n\ntype HeroProps = {\n  title: ReactNode;\n  subTitle: ReactNode;\n  buttons?: ReactNode;\n  lineColor?: string;\n};\n\nconst shapeProps = {\n  kind: ShapeKind.LOOPY,\n  complexity: 4,\n  stroke: { color: '#ff1b5f', width: 3 },\n};\n\nexport const Hero = ({ title, subTitle, buttons = [], lineColor = shapeProps.stroke.color }: HeroProps) => {\n  shapeProps.stroke.color = lineColor;\n  return (\n    <div className={styles.heroOuterDiv}>\n      <ShapeComponent {...shapeProps} style={{ position: 'absolute', maxWidth: '80%', marginTop: '-3em' }} />\n      <div style={{ margin: '5em' }}>\n        <Typography variant=\"h1\">{title}</Typography>\n        <Typography variant=\"h2\">{subTitle}</Typography>\n        <>{buttons}</>\n      </div>\n    </div>\n  );\n};\n","import { Box, BoxProps } from '@mui/material';\n\nexport const Section = (props: BoxProps) => (\n  <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"100vh\" maxWidth=\"1440px\" {...props} />\n);\n","import React from 'react';\nimport styles from './App.module.css';\nimport { Header } from '../Header';\nimport { Footer } from '../Footer';\nimport { Hero } from '../Hero';\nimport { Section } from '../Section';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Header />\n      <Section>\n        <Hero\n          title={<>Instant Unique Brand</>}\n          subTitle={\n            <>\n              Beautiful procedurally generated shapes <br /> for your websites\n            </>\n          }\n        />\n      </Section>\n      <Footer />\n    </div>\n    // </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from '@mui/material/styles';\n\nexport const theme = createTheme({\n  typography: {\n    h1: {\n      fontSize: '5rem',\n    },\n    h2: {\n      fontSize: '3rem',\n    },\n  },\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport { ThemeProvider } from '@mui/material/styles';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}