{"version":3,"sources":["components/ShapeComponents/BackgroundBlob.module.css","components/App/App.module.css","components/ShapeComponents/VariableLine.module.css","components/Hero/Hero.module.css","components/ShapeComponents/SideBlob.module.css","components/Header/Header.tsx","components/Footer/Footer.tsx","lib/shapelib/core.ts","lib/shapelib/ShapeComponent.tsx","lib/shapelib/utils.ts","lib/shapelib/library.ts","lib/shapelib/grammar.ts","components/ShapeComponents/VariableLine.tsx","components/Hero/Hero.tsx","components/Section/Section.tsx","components/ShapeComponents/BackgroundBlob.tsx","components/AccentBlobsExample/AccentBlobsExample.tsx","components/TextBlock/TextBlock.tsx","components/ShapeComponents/SideBlob.tsx","components/App/App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["module","exports","Header","className","Footer","ShapeKind","isGradientSpec","spec","includes","type","defaultShapeProps","kind","CLOSED","complexity","smoothness","variability","seed","path","defaultDrawShapeProps","fill","color","opacity","stroke","width","transform","drawShape","params","allParams","pathArray","LOOPY","WAVY","library","loopyLine","numElements","baseRadius","closedPath","numPoints","PathArray","getShape","draw","SVG","addTo","element","size","filledPath","gradientParams","block","gradient","rotate","orientation","bbox","bboxExpanded","x","y","margin","height","viewbox","e","ShapeComponent","props","refToDiv","useRef","useEffect","current","ref","textContent","style","zIndex","smooth","flattenedArray","flat","console","log","length","slice","Error","flip","how","numberCounter","index","flipY","flipX","flipXY","scale","factor","value","noise","rng","seedrandom","small","big","toPointArray","output","concat","PointArray","bend","lastX","r","Math","sqrt","angle","PI","newX","cos","sin","newY","pathCompose","segments","modifier","p","forEach","segment","flattenedOutput","flattenedSegment","quickDrawPath","elementID","simpleLinearGradient","stops","gradientSpec","add","i","stop","loopSegment","reverseLoopSegment","curveSegment90","reverseCurveSegment90","curveSegment45","reverseCurveSegment45","connectorSegment","reverseConnectorSegment","horizontalrSegment","basicBlocks","loop","crest","l","connector","twistConnector","drop","compositeShapes","nPointRadial","radialDistances","offset","numSegments","deltaR","controlpointLength","abs","dX","dY","controlPointX","controlPointY","oddNumberedBaseRadius","radii","Array","currentBaseRadius","NodeTypes","blob2","blob3","blob4","blob5","closedShapes","isAtom","node","ATOM","createNullAtom","atom","evaluateTree","children","map","modifierVocabulary","S","utils","L","B","F","I","symmetricAtoms","a","b","c","atomVocabulary","allAtoms","counter","key1","key2","choice","arr","floor","VariableLine","pathString","rest","input","position","tree","next","word","left","right","MODIFIER","decodePathString","styles","shape","shapeProps","Hero","title","subTitle","buttons","lineColor","numModifiers","modifierSet","Object","keys","atomSet","depth","generateLinish","heroOuterDiv","maxWidth","marginTop","Typography","variant","Section","Box","display","justifyContent","alignItems","minHeight","padding","BackgroundBlob","passThroughProps","pathProps","container","contents","Item","baseColor","AccentBlobsExample","Grid","spacing","item","xs","TextBlock","SideBlob","sideblob","App","app","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","typography","h1","fontSize","h2","body1","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,UAAY,kCAAkC,SAAW,mC,mBCAjHD,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,UAAY,gCAAgC,SAAW,iC,mBCA7GD,EAAOC,QAAU,CAAC,aAAe,6B,mBCAjCD,EAAOC,QAAU,CAAC,SAAW,6B,+1CCDtB,SAASC,IACd,OAAO,qBAAKC,UAAU,WCDjB,SAASC,IACd,OAAO,qBAAKD,UAAU,WAGTC,ICCHC,E,sBAqBZ,SAASC,EAAeC,GACtB,MAAM,SAAUA,IACV,UAAWA,GACV,CAAC,SAAU,UAAUC,SAAUD,EAAsBE,Q,SAxBlDJ,O,eAAAA,I,iBAAAA,I,oBAAAA,M,KA0CL,IAAMK,EAAyC,CACpDC,KAAMN,EAAUO,OAChBC,WAAY,EACZC,WAAY,EACZC,YAAa,EACbC,KAAM,EACNC,KAAM,MASKC,EAAqB,2BAAQR,GANa,CACrDS,KAAM,CAAEC,MAAO,OAAQC,QAAS,GAChCC,OAAQ,CAAEF,MAAO,QAASG,MAAO,EAAGF,QAAS,IAC7CG,UAAW,KAyCN,SAASC,EAAUC,GACxB,IAAMC,EAAoC,2BAAQT,GAA0BQ,GACtEE,EApCD,SAAkBF,GACvB,IAAMC,EAA8B,2BAAQjB,GAAsBgB,GAClE,GAAuB,OAAnBC,EAAUV,KAAe,OAAOU,EAAUV,KAE9C,OAAQU,EAAUhB,MAChB,KAAKN,EAAUwB,MAQf,KAAKxB,EAAUyB,KAEb,OAAOC,EAAQC,UAAU,CACvBC,YAAaN,EAAUd,WACvBE,YAAaY,EAAUZ,YACvBD,WAAYa,EAAUb,WACtBoB,WAAY,MAEhB,KAAK7B,EAAUO,OACb,OAAOmB,EAAQI,WAAW,CACxBC,UAAWT,EAAUd,WACrBE,YAAaY,EAAUZ,YACvBD,WAAYa,EAAUb,WACtBoB,WAAY,MAKlB,OAAO,IAAIG,IAKOC,CAASX,GACrBY,EAAYC,cAAMC,MAAMd,EAAUe,SAASC,KAAK,OAAQ,QAC1D1B,EAAOsB,EAAKtB,KAAKW,GACjBgB,EAAa3B,EAGjB,GAA8B,kBAAnBU,EAAUR,KACnByB,EAAa3B,EAAKE,KAAKQ,EAAUR,WAC5B,GAAIb,EAAeqB,EAAUR,MAAO,CACzC,IAAM0B,EAAoD,CAAClB,EAAUR,KAAKV,KAAMkB,EAAUR,KAAK2B,OACzFC,EAAWR,EAAKQ,SAAL,MAAAR,EAAiBM,GAAgBG,OAAOrB,EAAUR,KAAK8B,aAAe,GACvFL,EAAa3B,EAAKE,KAAK4B,QAEvBH,EAAa3B,EAAKE,KAAKQ,EAAUR,MAGnC,GAAgC,kBAArBQ,EAAUL,OACnBL,EAAO2B,EAAWtB,OAAOK,EAAUL,aAC9B,GAAIhB,EAAeqB,EAAUL,QAAS,CAC3C,IAAMuB,EAAoD,CAAClB,EAAUL,OAAOb,KAAMkB,EAAUL,OAAOwB,OAC7FC,EAAWR,EAAKQ,SAAL,MAAAR,EAAiBM,GAAgBG,OAAOrB,EAAUL,OAAO2B,aAAe,GACzFL,EAAa3B,EAAKE,KAAK4B,QAEvB9B,EAAO2B,EAAWtB,OAAOK,EAAUL,QAIrC,IACE,IAAM4B,EAAOjC,EAAKiC,OAEZC,EAAe,CACnBC,EAAGF,EAAKE,EAFK,EAGbC,EAAGH,EAAKG,EAHK,EAIb9B,MAAO2B,EAAK3B,MAAQ+B,EACpBC,OAAQL,EAAKK,OAASD,GAExBf,EAAKiB,QAAL,eAAkBL,IAClB,MAAOM,IAKT,OAAOxC,EC7IF,IAAMyC,EAA2E,SAACC,GACvF,IAAMC,EAAWC,iBAAO,MAUxB,OARAC,qBAAU,WACR,GAAIF,EAASG,QAAS,CACpB,IAAMC,EAAMJ,EAASG,QACrBC,EAAIC,YAAc,GAClBxC,EAAU,aAAEiB,QAASsB,GAAQL,QAI1B,iCAAKK,IAAKJ,EAAUM,MAAO,CAAE3C,MAAO,OAAQgC,OAAQ,OAAQY,QAAS,IAASR,K,iBCVhF,SAASS,EAAOxC,GAGrB,IAAIyC,EAAiBzC,EAAU0C,OAE/B,GADAC,QAAQC,IAAIH,GACkB,IAA1BA,EAAeI,OAAc,OAAO,IAAIpC,IAC5C,GAA0B,MAAtBgC,EAAe,GACjB,OAAOzC,EAKT,GAH0B,MAAtByC,EAAe,KACjBA,EAAiBA,EAAeK,MAAM,IAEd,MAAtBL,EAAe,GAIjB,MAAM,IAAIM,MAAM,2CAA6CN,GAE/D,OALEA,EAAiBA,EAAeK,MAAM,IACvB,GAAK,IAIf,IAAIrC,IAAUgC,GAGhB,SAASO,EAAKhD,EAAsBiD,GAIzC,IAHA,IAAIR,EAAiBzC,EAAU0C,OAC3BQ,EAAgB,EAEXC,EAAQ,EAAGA,EAAQV,EAAeI,OAAQM,IAAS,CAC1D,IAAMrC,EAAU2B,EAAeU,GACR,kBAAZrC,IACG,MAARmC,IAEFR,EAAeU,GAASD,EAAgB,IAAM,EAAIpC,GAAWA,GAEnD,MAARmC,IAEFR,EAAeU,GAASD,EAAgB,IAAM,EAAIpC,GAAWA,GAE/DoC,GAAiB,GAGrB,OAAO,IAAIzC,IAAUgC,GAGhB,SAASW,EAAMpD,GACpB,OAAOgD,EAAKhD,EAAW,KAGlB,SAASqD,EAAMrD,GACpB,OAAOgD,EAAKhD,EAAW,KAGlB,SAASsD,EAAOtD,GACrB,OAAOgD,EAAKA,EAAKhD,EAAW,KAAM,KAG7B,SAASuD,EAAMvD,EAAsBwD,GAG1C,IADA,IAAIf,EAAiBzC,EAAU0C,OACtBS,EAAQ,EAAGA,EAAQV,EAAeI,OAAQM,IAAS,CAC1D,IAAMM,EAAQhB,EAAeU,GACR,kBAAVM,IACThB,EAAeU,GAASM,EAAQD,GAGpC,OAAO,IAAI/C,IAAUgC,GAGhB,SAASiB,EAAM1D,GAIpB,IAJwF,IAA9CwD,EAA6C,uDAA9B,GAAIpE,EAA0B,uCAEjFuE,EAAMC,IAAWxE,GACnBqD,EAAiBzC,EAAU0C,OACtBS,EAAQ,EAAGA,EAAQV,EAAeI,OAAQM,IAAS,CAC1D,IAAMM,EAAQhB,EAAeU,GACR,kBAAVM,IACThB,EAAeU,GAASM,EAAQD,EAASG,KAG7C,OAAO,IAAIlD,IAAUgC,GAGhB,SAASoB,EAAM7D,GACpB,OAAOuD,EAAMvD,EAAW,IAGnB,SAAS8D,EAAI9D,GAClB,OAAOuD,EAAMvD,EAAW,GAGnB,SAAS+D,EAAa/D,GAI3B,IAHA,IAAIyC,EAAiBzC,EAAU0C,OAC3BsB,EAAmB,GAEdb,EAAQ,EAAGA,EAAQV,EAAeI,OAAQM,IAAS,CAC1D,IAAMrC,EAAU2B,EAAeU,GACR,kBAAZrC,IACTkD,EAASA,EAAOC,OAAOnD,IAG3B,OAAO,IAAIoD,IAAWF,GAMjB,SAASG,EAAKnE,GAKnB,IAJA,IAAIyC,EAAiBzC,EAAU0C,OAC3BQ,EAAgB,EAChBkB,EAAQ,EAEHjB,EAAQ,EAAGA,EAAQV,EAAeI,OAAQM,IAAS,CAC1D,IAAMrC,EAAU2B,EAAeU,GAC/B,GAAuB,kBAAZrC,EAAsB,CAC/B,GAAIoC,EAAgB,IAAM,EAExBkB,EAAQtD,MACH,CACL,IAAMU,EAAI4C,EACJ3C,EAAIX,EACJuD,EAAIC,KAAKC,KAAK/C,EAAIA,EAAIC,EAAIA,GAC1B+C,EAAS,EAAIF,KAAKG,GAAKJ,EAAK,IAC5BK,EAAOlD,EAAI8C,KAAKK,IAAIH,GAAS/C,EAAI6C,KAAKM,IAAIJ,GAC1CK,EAAOrD,EAAI8C,KAAKM,IAAIJ,GAAS/C,EAAI6C,KAAKK,IAAIH,GAChD/B,EAAeU,GAAS0B,EACxBpC,EAAeU,EAAQ,GAAKuB,EAE9BxB,KAGJ,OAAO,IAAIzC,IAAUgC,GAGhB,SAASqC,EAAYC,GAA8D,IAAvCC,EAAsC,uDAA7B,SAACC,GAAD,OAAeA,GAOrEjB,EAAS,IAAIvD,IAyBjB,MAxB8B,MAA1BsE,EAAS,GAAGrC,OAAO,KACrBsB,EAASA,EAAS,IAAIvD,IAAU,UAGlCsE,EAASG,SAAQ,SAACC,GAChB,IAAMC,EAAkBpB,EAAOtB,OAC3B2C,EAAmBF,EAAQzC,OACH,MAAxB2C,EAAiB,KAAYA,EAAmBA,EAAiBvC,MAAM,IAC3E,IAAMtB,EAAI4D,EAAgBA,EAAgBvC,OAAS,GAC7CpB,EAAI2D,EAAgBA,EAAgBvC,OAAS,GAC/CK,EAAgB,EAEpB,GAAiB,kBAAN1B,GAA+B,kBAANC,EAAgB,OAAOuC,EAC3D,IAAK,IAAIb,EAAQ,EAAGA,EAAQkC,EAAiBxC,OAAQM,IAAS,CAC5D,IAAMrC,EAAUuE,EAAiBlC,GACV,kBAAZrC,IAETuE,EAAiBlC,GAASrC,GAAWoC,EAAgB,IAAM,EAAI1B,EAAIC,GACnEyB,GAAiB,GAGrBc,EAASA,EAAOC,OAAOe,EAAS,IAAIvE,IAAU4E,QAGzCrB,EAGF,SAASsB,EAAcC,EAAmBvF,GAG/C,OAFkBY,cAAMC,MAAM0E,GAAWxE,KAAK,OAAQ,QACpC1B,KAAKW,GAAWT,KAAK,QAAQG,OAAO,CAAEF,MAAO,OAAQG,MAAO,IAIzE,SAAS6F,EAAqBC,GAAoC,IAAnBpE,EAAkB,uDAAJ,GAC5DqE,EAA6B,CACjC7G,KAAM,SACNqC,MAAO,SAACyE,GACN,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAM5C,OAAQ+C,IAChCD,EAAIE,KAAKD,GAAKH,EAAM5C,OAAS,GAAI4C,EAAMG,KAG3CvE,eAEF,OAAOqE,ECjLT,IAAMI,EAAc,IAAIrF,IAAU,wBAC5BsF,EAAqB,IAAItF,IAAU,sBACnCuF,EAAiB,IAAIvF,IAAU,yBAC/BwF,EAAwB,IAAIxF,IAAU,yBACtCyF,EAAiB,IAAIzF,IAAU,yBAC/B0F,EAAwB,IAAI1F,IAAU,yBACtC2F,EAAmB,IAAI3F,IAAU,wBACjC4F,EAA0B,IAAI5F,IAAU,sBACxC6F,EAAqB,IAAI7F,IAAU,oBAE5B8F,EAA2B,CACtCT,cACAC,qBACAG,iBACAC,wBACAH,iBACAC,wBACAG,mBACAC,0BACAC,sBAMWE,EAAO1B,EAAY,CAC9BoB,EACAJ,EACAxC,EAAOyC,GACP3C,EAAM+C,KAEKM,EAAQ3B,EAAY,CAACoB,EAAgB9C,EAAM+C,KAAyB,SAACO,GAAD,OAAKA,KACzEC,EAAY7B,EAAY,CAACsB,EAAkBhD,EAAMiD,KACjDO,EAAiB9B,EAAY,CAACsB,EAAkBC,IAChDQ,EAAO/B,EAAY,CAC9BkB,EACA3C,EAAMyC,GACNjC,EAAMA,EAAMyC,IACZlD,EAAM2C,GACN3C,EAAM6C,KAGKa,GAA+B,CAC1CN,OACAC,QACAE,YACAC,iBACAC,QAUK,SAASzG,GAAUN,GAExB,OAAOgF,EAAY,CACjB,IAAIrE,IAAU,CAAC,UACfoD,EAAMT,EAAMqD,IACZG,EACA/C,EAAM2C,GACN1C,EAAIV,EAAMoD,IACVG,IAQG,SAASI,GAAaC,GAK3B,IAL0F,IAApC9H,EAAmC,uDAAhB,GACnE+H,EAAS,CAAEzF,EAAG,IAAKC,EAAG,KACxBuC,EAAS,IAAIvD,IAAU,CAAC,IAAKwG,EAAOzF,EAAGyF,EAAOxF,EAAIuF,EAAgB,KAChEE,EAAcF,EAAgBnE,OAE3B+C,EAAI,EAAGA,EAAIoB,EAAgBnE,OAAS,EAAG+C,IAAK,CACnD,IAAMvB,EAAI2C,EAAgBpB,EAAIsB,GACxBC,EAASH,EAAgBpB,EAAIsB,GAAeF,GAAiBpB,EAAE,GAAKsB,GACpEE,GAAsB9C,KAAK+C,IAAIF,GAAU9C,EAAI,IAAOnF,EAAamF,EAAI6C,EAAc,EAAI5C,KAAKG,GAC5FjD,EAAI6C,EAAIC,KAAKM,IAAS,EAAJgB,EAAQtB,KAAKG,GAAMyC,GAAeD,EAAOzF,EAC3DC,EAAI4C,EAAIC,KAAKK,IAAS,EAAJiB,EAAQtB,KAAKG,GAAMyC,GAAeD,EAAOxF,EAC3D6F,GAAMhD,KAAKK,IAAQ,EAAJiB,EAAQtB,KAAKG,GAAKyC,GAAeE,EAChDG,EAAKjD,KAAKM,IAAQ,EAAJgB,EAAQtB,KAAKG,GAAIyC,GAAeE,EAC9CI,EAAgBhG,EAAI8F,EACpBG,EAAgBhG,EAAI8F,EAGxBvD,EADQ,IAAN4B,EACO5B,EAAOC,OAAO,CACrB,IACAmD,EAAqBH,EAAOzF,EAC5BwF,EAAgB,GAAKC,EAAOxF,EAC5B+F,EACAC,EACAjG,EACAC,IAGOuC,EAAOC,OAAO,CAAC,IAAKuD,EAAeC,EAAejG,EAAGC,IAMlE,OAFAuC,EAASA,EAAOC,OAAO,CAAC,MAYnB,SAAS1D,GAAWT,GAIzB,IAHA,IAAM6D,EAAMC,IAAW,eACjB8D,EAAwB5H,EAAOQ,WAAaR,EAAOX,YACnDwI,EAAQ,IAAIC,MAAM9H,EAAOU,WACtBoF,EAAI,EAAGA,EAAI9F,EAAOU,UAAWoF,IAAK,CACzC,IAAMiC,EAAoBjC,EAAE,IAAM,EAAI9F,EAAOQ,WAAaoH,EAC1DC,EAAM/B,GAAKiC,GAAqBlE,IAAQ,IAAO7D,EAAOX,YAExD,OAAO4H,GAAaY,EAAO7H,EAAOZ,YAG7B,ICtHK4I,GDsHCC,GAAQhB,GAAa,CAAC,GAAI,KAC1BiB,GAAQjB,GAAa,CAAC,GAAI,GAAI,KAC9BkB,GAAQlB,GAAa,CAAC,GAAI,GAAI,GAAI,KAClCmB,GAAQnB,GAAa,CAAC,GAAI,GAAI,GAAI,IAAK,KAEvCoB,GAA4B,CACvCJ,SACAC,SACAC,SACAC,UC7GK,SAASE,GAAOC,GACrB,OAAOA,EAAKxJ,OAASiJ,GAAUQ,KAO1B,SAASC,KACd,MAAO,CACL1J,KAAMiJ,GAAUQ,KAChBE,KAAM,IAAI/H,KAIP,SAASgI,GAAaJ,GAC3B,OAAID,GAAOC,GAAcA,EAAKG,KACvBH,EAAKrD,SAASF,EAAYuD,EAAKK,SAASC,IAAIF,O,SAnCzCX,O,uBAAAA,I,gBAAAA,Q,KAsCL,IAAMc,GAAmD,CAC9DC,EAAGC,EAAMjF,MACTkF,EAAGD,EAAMhF,IACTkF,EAAGF,EAAM3E,KAET8E,EAAG,SAACvC,GAAD,OAAOoC,EAAMhE,YAAY,CAAC3E,EAAQwG,UAAWmC,EAAM1F,MAAMsD,MAC5DwC,EAAG,SAACxC,GAAD,OAAOA,IAONyC,GAAuC,CAC3CC,EAAGjJ,EAAQqG,KACX6C,EAAGlJ,EAAQsG,MACX6C,EAAGnJ,EAAQwG,WAOA4C,GAAwC,WACnD,IAAMC,EAAiC,GACnCC,EAAU,EAEd,IAAK,IAAMC,KAAQP,GACjB,IAAK,IAAMQ,KAAQR,GACjBK,EAHa,6BAGKC,IAAY3E,EAAY,CAACqE,GAAeO,GAAOZ,EAAM1F,MAAM+F,GAAeQ,MAC5FF,IAGJ,OAAOD,EAV4C,GAuDrD,SAASI,GAAUC,EAAUzK,GAC3B,IAAMuE,EAAMC,IAAWxE,GACvB,OAAOyK,EAAIvF,KAAKwF,MAAMnG,IAAQkG,EAAIhH,S,mDC/HvBkH,GAAgF,SAAChI,GAC5F,IAAOiI,EAAuBjI,EAAvBiI,WAAeC,EAAtB,aAA8BlI,EAA9B,IAEM1C,EAAOoJ,GDmFR,SAA0ByB,GAC/B,IAAIC,EAAW,EACf,IAAKD,EAAO,OAAO3B,KAEnB,IAAM6B,EAAQ,SAASC,IACrB,IAAMC,EAAOJ,EAAMC,KACnB,GAAIG,GAAQA,KAAQ1B,GAAoB,CACtC,IAAM2B,EAAOF,KAAU9B,KACjBiC,EAAQH,KAAU9B,KAOxB,MAN2B,CACzB1J,KAAMiJ,GAAU2C,SAChBzF,SAAU4D,GAAmB0B,GAC7B5B,SAAU,CAAC6B,EAAMC,IAKrB,OAAIF,GAAQA,KAAQf,GACK,CACrB1K,KAAMiJ,GAAUQ,KAChBE,KAAMe,GAAee,IAMlB,KAtBK,GAyBd,GAAa,OAATF,EAAe,MAAM,IAAIrH,MAAM,YAEnC,OAAOqH,ECnHMM,CAAiBV,IAE9B,OAAO,cAAC,EAAD,2BAAoBC,GAApB,IAA0B5K,KAAMA,EAAMN,KAAMN,EAAUwB,MAAO1B,UAAWoM,KAAOC,MAAOrL,KAAK,W,oBCE9FsL,GAAa,CACjB9L,KAAMN,EAAUwB,MAChBhB,WAAY,EACZS,OAAQ,CAAEF,MAAO,YAAaG,MAAO,IAG1BmL,GAAO,SAAC,GAAuF,IAArFC,EAAoF,EAApFA,MAAOC,EAA6E,EAA7EA,SAA6E,IAAnEC,eAAmE,MAAzD,GAAyD,MAArDC,iBAAqD,MAAzCL,GAAWnL,OAAOF,MAAuB,EACnGwK,EFqHD,SAAwBmB,GAC7B,IAAMC,EAAcC,OAAOC,KAAK1C,IAC1B2C,EAAUF,OAAOC,KAAK/B,IAK5B,OAJc,SAASc,EAAKmB,GAC1B,OAAGA,GAAOL,EAAqBvB,GAAO2B,GAC/B3B,GAAOwB,GAAef,EAAKmB,EAAM,GAAKnB,EAAKmB,EAAM,GAF5C,CAGX,GE3HgBC,CAAe,GAGlC,OADAZ,GAAWnL,OAAOF,MAAQ0L,EAExB,sBAAK3M,UAAWoM,KAAOe,aAAvB,UACE,cAAC,GAAD,2BACMb,IADN,IAEEb,WAAYA,EACZ1H,MAAO,CAAE6H,SAAU,WAAYwB,SAAU,OAAQC,UAAW,OAAQrJ,QAAS,MAE/E,sBAAKD,MAAO,CAAEZ,OAAQ,OAAtB,UACE,cAACmK,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0Bf,IAC1B,cAACc,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0Bd,IAC1B,mCAAGC,W,SChCEc,GAAU,SAAChK,GAAD,OACrB,cAACiK,GAAA,EAAD,aACEC,QAAQ,OACRC,eAAe,SACfC,WAAW,SACXC,UAAU,OACVT,SAAS,SACTjK,OAAO,OACP2K,QAAQ,gBACRlC,SAAS,YACLpI,K,8CCLKuK,GAAgD,SAACvK,GAC5D,IAAQvB,EAAmCuB,EAAnCvB,UAAc+L,EAAtB,aAA2CxK,EAA3C,IACMyK,EAAsB,CAC1BzN,KAAMN,EAAUO,OAChBC,WAAYuB,EACZrB,YAAa,GACbD,WAAY,IAGd,OACE,sBAAKX,UAAWoM,KAAO8B,UAAvB,UACE,cAAC,EAAD,uCAAoBD,GAAeD,GAAnC,IAAqDhO,UAAWoM,KAAOC,SACvE,qBAAKrM,UAAWoM,KAAO+B,SAAvB,SAAkC3K,EAAM2G,eCfxCiE,GAAqB,SAAC5K,GAAD,OAAW,qBAAKO,MAAO,CAAE+J,QAAS,QAAvB,SAAkCtK,EAAM2G,YACxEkE,GAAY,UAELC,GAAqB,WAChC,OACE,eAACC,GAAA,EAAD,CAAML,WAAS,EAACM,QAAS,EAAzB,UACE,cAACD,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACA,8BAAK,cAACpB,EAAA,EAAD,CAAYC,QAAQ,KAApB,mCAGL,cAACgB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,GAAD,CAAgBzM,UAAW,EAAGd,OAAQ,CAAEF,MAAOoN,GAAWjN,MAAO,EAAGF,QAAS,IAAOF,KAAK,OAAzF,SACE,eAAC,GAAD,WACE,cAACsM,EAAA,EAAD,CAAYC,QAAQ,KAApB,0BACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,kFAIN,cAACgB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,GAAD,CAAgBzM,UAAW,EAAGd,OAAQ,OAAQH,KAAMqN,GAApD,SACE,eAAC,GAAD,WACE,cAACf,EAAA,EAAD,CAAYC,QAAQ,KAApB,oBACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,gGAMN,cAACgB,GAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,GAAD,CACEzM,UAAW,GACXd,OAAQ,OACRH,KAAMiG,EAAqB,CAACoH,GAAU3I,OAAO,MAAO2I,IAAY,IAHlE,SAKE,eAAC,GAAD,WACE,cAACf,EAAA,EAAD,CAAYC,QAAQ,KAApB,sBACA,cAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,oGCjCCoB,GAAqC,SAACnL,GACjD,OACE,sBAAKO,MAAO,CAAC2J,QAAQ,SAArB,UACA,cAACJ,EAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0B/J,EAAMgJ,QAChC,cAACc,EAAA,EAAD,CAAYC,QAAQ,QAApB,SAA6B/J,EAAM2G,e,oBCR1ByE,GAA0C,SAAApL,GAAK,OACxD,cAAC,EAAD,2BACIA,GADJ,IAEAhD,KAAMN,EAAUO,OAChBC,WAAY,EACZE,YAAa,GACbZ,UAAWoM,KAAOyC,SAClB1N,OAAO,OACPH,KAAK,YC4BM8N,OA7Bf,WACE,OACE,sBAAK9O,UAAWoM,IAAO2C,IAAvB,UACE,cAAChP,EAAD,IACA,cAAC,GAAD,UACE,cAAC,GAAD,CACEyM,MAAO,4DACPC,SACE,gFAC0C,uBAD1C,4BAMN,cAAC,GAAD,UACE,cAAC,GAAD,MAEF,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,CAAWD,MAAM,aAAjB,gDAIF,cAACvM,EAAD,Q,SCnBS+O,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCPDQ,GAAQC,aAAY,CAC/BC,WAAY,CACVC,GAAI,CACFC,SAAU,QAEZC,GAAI,CACFD,SAAU,QAEZE,MAAM,CACJF,SAAU,WAGdG,QAAS,CACPC,QAAS,CAEPC,KAAM,WAIRC,UAAW,CACTC,MAAO,UACPF,KAAM,UAENG,aAAc,WAIhBC,kBAAmB,EAInBC,YAAa,MCzBjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,GAAA,EAAD,CAAelB,MAAOA,GAAtB,SACE,cAAC,GAAD,QAGJmB,SAASC,eAAe,SAM1B7B,O","file":"static/js/main.66f22254.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"shape\":\"BackgroundBlob_shape__YU32X\",\"container\":\"BackgroundBlob_container__2Fb3J\",\"contents\":\"BackgroundBlob_contents__1cbBH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shape\":\"VariableLine_shape__36i_U\",\"container\":\"VariableLine_container__1vLfs\",\"contents\":\"VariableLine_contents__7I8ti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heroOuterDiv\":\"Hero_heroOuterDiv__OEvcs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideblob\":\"SideBlob_sideblob__31TX9\"};","export function Header() {\n  return <div className=\"header\"></div>;\n}\n","export function Footer() {\n  return <div className=\"footer\"></div>;\n}\n\nexport default Footer;\n","import { Container, FillData, Gradient, MatrixAlias, PathArray, StrokeData, SVG, Svg } from '@svgdotjs/svg.js';\nimport { library } from '.';\n\n// Type definitions /////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport enum ShapeKind {\n  WAVY,\n  LOOPY,\n  CLOSED,\n}\n\nexport interface PathProps {\n  kind: ShapeKind;\n  complexity?: number;\n  smoothness?: number;\n  variability?: number;\n  seed?: number;\n  path?: PathArray | null;\n}\n\nexport interface GradientSpec {\n  type: string;\n  block: (stop: Gradient) => void;\n  orientation?: number;\n}\n\nfunction isGradientSpec(spec: any): spec is GradientSpec {\n  if (!('type' in spec)) return false;\n  if (!('block' in spec)) return false;\n  return ['linear', 'radial'].includes((spec as GradientSpec).type);\n}\n\nexport type StyleProps = {\n  fill?: FillData | string | GradientSpec;\n  stroke?: StrokeData | string | GradientSpec;\n  transform?: MatrixAlias;\n};\n\nexport type Element = {\n  element: HTMLElement | string;\n};\n\nexport type ShapeProps = PathProps & StyleProps;\nexport type DrawShapeParams = Element & PathProps & StyleProps;\n\n// Default Values /////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport const defaultShapeProps: Required<PathProps> = {\n  kind: ShapeKind.CLOSED,\n  complexity: 4,\n  smoothness: 1,\n  variability: 1,\n  seed: 1,\n  path: null,\n};\n\nexport const defaultStyleProps: Required<StyleProps> = {\n  fill: { color: '#000', opacity: 0.0 },\n  stroke: { color: 'black', width: 3, opacity: 0.8 },\n  transform: {},\n};\n\nexport const defaultDrawShapeProps = { ...defaultShapeProps, ...defaultStyleProps };\n\n// Function implementations /////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function getShape(params: PathProps) {\n  const allParams: Required<PathProps> = { ...defaultShapeProps, ...params };\n  if (allParams.path !== null) return allParams.path;\n\n  switch (allParams.kind) {\n    case ShapeKind.LOOPY:\n      // TODO: make loopy line procedural\n      return library.loopyLine({\n        numElements: allParams.complexity,\n        variability: allParams.variability,\n        smoothness: allParams.smoothness,\n        baseRadius: 100,\n      });\n    case ShapeKind.WAVY:\n      // TODO: implemeny wavy line\n      return library.loopyLine({\n        numElements: allParams.complexity,\n        variability: allParams.variability,\n        smoothness: allParams.smoothness,\n        baseRadius: 100,\n      });\n    case ShapeKind.CLOSED:\n      return library.closedPath({\n        numPoints: allParams.complexity,\n        variability: allParams.variability,\n        smoothness: allParams.smoothness,\n        baseRadius: 100,\n      });\n    default:\n      break;\n  }\n  return new PathArray();\n}\n\nexport function drawShape(params: DrawShapeParams) {\n  const allParams: Required<DrawShapeParams> = { ...defaultDrawShapeProps, ...params };\n  const pathArray = getShape(allParams as PathProps);\n  const draw: Svg = SVG().addTo(allParams.element).size('100%', '100%');\n  let path = draw.path(pathArray);\n  let filledPath = path;\n\n  // some verbose language to be allowed to use overloaded \"fill\" function with union types\n  if (typeof allParams.fill === 'string') {\n    filledPath = path.fill(allParams.fill as string);\n  } else if (isGradientSpec(allParams.fill)) {\n    const gradientParams: Parameters<Container['gradient']> = [allParams.fill.type, allParams.fill.block];\n    const gradient = draw.gradient(...gradientParams).rotate(allParams.fill.orientation || 0);\n    filledPath = path.fill(gradient);\n  } else {\n    filledPath = path.fill(allParams.fill);\n  }\n\n  if (typeof allParams.stroke === 'string') {\n    path = filledPath.stroke(allParams.stroke as string);\n  } else if (isGradientSpec(allParams.stroke)) {\n    const gradientParams: Parameters<Container['gradient']> = [allParams.stroke.type, allParams.stroke.block];\n    const gradient = draw.gradient(...gradientParams).rotate(allParams.stroke.orientation || 0);\n    filledPath = path.fill(gradient);\n  } else {\n    path = filledPath.stroke(allParams.stroke as StrokeData);\n  }\n\n  // set viewport for svg to bounding box + margin\n  try {\n    const bbox = path.bbox();\n    const margin = 4;\n    const bboxExpanded = {\n      x: bbox.x - margin,\n      y: bbox.y - margin,\n      width: bbox.width + margin * 2,\n      height: bbox.height + margin * 2,\n    };\n    draw.viewbox({ ...bboxExpanded });\n  } catch (e) {\n    //TODO: do something to get an alternative bounding box\n    // this is currently only a problem in jest. Real browsers do fine.\n  }\n\n  return path;\n}\n","import React, { useEffect, useRef } from 'react';\nimport { drawShape, ShapeProps } from './core';\n\nexport const ShapeComponent: React.FC<ShapeProps & React.HTMLAttributes<HTMLElement>> = (props) => {\n  const refToDiv = useRef(null);\n\n  useEffect(() => {\n    if (refToDiv.current) {\n      const ref = refToDiv.current as HTMLElement;\n      ref.textContent = '';\n      drawShape({ element: ref, ...props });\n    }\n  });\n\n  return <div ref={refToDiv} style={{ width: '100%', height: '100%', zIndex: -1 }} {...props} />;\n};\n","import { Path, PathArray, PointArray, Svg, SVG } from '@svgdotjs/svg.js';\nimport seedrandom from 'seedrandom';\nimport { GradientSpec } from '.';\n\nexport function smooth(pathArray: PathArray): PathArray {\n  \n  \n  let flattenedArray = pathArray.flat();\n  console.log(flattenedArray);\n  if (flattenedArray.length === 0) return new PathArray()\n  if (flattenedArray[0] === 'S') {\n    return pathArray;\n  }\n  if (flattenedArray[0] === 'M') {\n    flattenedArray = flattenedArray.slice(3);\n  }\n  if (flattenedArray[0] === 'C') {\n    flattenedArray = flattenedArray.slice(2);\n    flattenedArray[0] = 'S';\n  } else {\n    throw new Error('Only cubic bezier curves are supported. ' + flattenedArray);\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function flip(pathArray: PathArray, how: 'x' | 'y'): PathArray {\n  let flattenedArray = pathArray.flat();\n  let numberCounter = 0;\n\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const element = flattenedArray[index];\n    if (typeof element === 'number') {\n      if (how === 'y') {\n        // if element is at an even-numbered position it's an x coordidante otherwise a y coordinate\n        flattenedArray[index] = numberCounter % 2 === 0 ? element : -element;\n      }\n      if (how === 'x') {\n        // if element is at an even-numbered position it's an x coordidante otherwise a y coordinate\n        flattenedArray[index] = numberCounter % 2 === 1 ? element : -element;\n      }\n      numberCounter += 1;\n    }\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function flipY(pathArray: PathArray): PathArray {\n  return flip(pathArray, 'y');\n}\n\nexport function flipX(pathArray: PathArray): PathArray {\n  return flip(pathArray, 'x');\n}\n\nexport function flipXY(pathArray: PathArray): PathArray {\n  return flip(flip(pathArray, 'x'), 'y');\n}\n\nexport function scale(pathArray: PathArray, factor: number): PathArray {\n  // scale path relative to 0,0 means we simply multiply all numbers by factor\n  let flattenedArray = pathArray.flat();\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const value = flattenedArray[index];\n    if (typeof value === 'number') {\n      flattenedArray[index] = value * factor;\n    }\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function noise(pathArray: PathArray, factor: number=10, seed?: string): PathArray {\n  // TODO: adding noise to control points creates weird artifacts. \n  const rng = seedrandom(seed)\n  let flattenedArray = pathArray.flat();\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const value = flattenedArray[index];\n    if (typeof value === 'number') {\n      flattenedArray[index] = value + factor * rng();\n    }\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function small(pathArray: PathArray): PathArray {\n  return scale(pathArray, 0.5);\n}\n\nexport function big(pathArray: PathArray): PathArray {\n  return scale(pathArray, 2.0);\n}\n\nexport function toPointArray(pathArray: PathArray): PointArray {\n  let flattenedArray = pathArray.flat();\n  let output: number[] = [];\n\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const element = flattenedArray[index];\n    if (typeof element === 'number') {\n      output = output.concat(element);\n    }\n  }\n  return new PointArray(output);\n}\n\n/* \nRotate points around origin depending on their distance from the origin\n*/\nexport function bend(pathArray: PathArray): PathArray {\n  let flattenedArray = pathArray.flat();\n  let numberCounter = 0;\n  let lastX = 0;\n\n  for (let index = 0; index < flattenedArray.length; index++) {\n    const element = flattenedArray[index];\n    if (typeof element === 'number') {\n      if (numberCounter % 2 === 0) {\n        // is x coordinate\n        lastX = element;\n      } else {\n        const x = lastX;\n        const y = element;\n        const r = Math.sqrt(x * x + y * y);\n        const angle = (2 * Math.PI * r) / 100000;\n        const newX = x * Math.cos(angle) - y * Math.sin(angle);\n        const newY = x * Math.sin(angle) + y * Math.cos(angle);\n        flattenedArray[index] = newY;\n        flattenedArray[index - 1] = newX;\n      }\n      numberCounter++;\n    }\n  }\n  return new PathArray(flattenedArray);\n}\n\nexport function pathCompose(segments: PathArray[], modifier=(p:PathArray)=>p): PathArray {\n  // we assume that the last two numbers in a path segment are the end point of the path so far.\n  // That end point will be the starting point of the next segment.\n  // each segment is encoded as if starting at 0,0 so the segment has to be translated to new coordinates before appending.\n  // let modifierFunc = smooth//(l:PathArray) => l\n  // if (modifier) modifierFunc = modifier\n\n  let output = new PathArray();\n  if (segments[0].flat()[0] !== 'M') {\n    output = output = new PathArray('M 0 0');\n  }\n\n  segments.forEach((segment) => {\n    const flattenedOutput = output.flat();\n    let flattenedSegment = segment.flat();\n    if (flattenedSegment[0] === 'M') flattenedSegment = flattenedSegment.slice(3)\n    const x = flattenedOutput[flattenedOutput.length - 2];\n    const y = flattenedOutput[flattenedOutput.length - 1];\n    let numberCounter = 0;\n\n    if (typeof x !== 'number' || typeof y !== 'number') return output;\n    for (let index = 0; index < flattenedSegment.length; index++) {\n      const element = flattenedSegment[index];\n      if (typeof element === 'number') {\n        // if element is at an even-numbered position it's an x coordidante otherwise a y coordinate\n        flattenedSegment[index] = element + (numberCounter % 2 === 0 ? x : y);\n        numberCounter += 1;\n      }\n    }\n    output = output.concat(modifier(new PathArray(flattenedSegment))) as PathArray;\n  });\n\n  return output;\n}\n\nexport function quickDrawPath(elementID: string, pathArray: PathArray): Path {\n  const draw: Svg = SVG().addTo(elementID).size('100%', '100%');\n  const path = draw.path(pathArray).fill('none').stroke({ color: '#000', width: 3 });\n  return path;\n}\n\nexport function simpleLinearGradient(stops: string[], orientation = 90) {\n  const gradientSpec: GradientSpec = {\n    type: 'linear',\n    block: (add) => {\n      for (let i = 0; i < stops.length; i++) {\n        add.stop(i / (stops.length - 1), stops[i]);\n      }\n    },\n    orientation,\n  };\n  return gradientSpec;\n}\n","import { PathArray } from '@svgdotjs/svg.js';\nimport seedrandom from 'seedrandom';\nimport { pathCompose, flipY, flipX, flipXY, small, big } from './utils';\nexport type pathLibrary = { [key: string]: PathArray };\n\n////////////////////////////////////////////////////////////////////////////////////\n// basic blocks\n////////////////////////////////////////////////////////////////////////////////////\nconst loopSegment = new PathArray('C 25 50 25 100 0 100');\nconst reverseLoopSegment = new PathArray('C 25 0 25 50 0 100');\nconst curveSegment90 = new PathArray('C 50 0 100 50 100 100');\nconst reverseCurveSegment90 = new PathArray('C 0 50 50 100 100 100');\nconst curveSegment45 = new PathArray('C 50 25 75 50 100 100');\nconst reverseCurveSegment45 = new PathArray('C 25 50 50 75 100 100');\nconst connectorSegment = new PathArray('C 50 25 90 25 100 25');\nconst reverseConnectorSegment = new PathArray('C 10 0 50 0 100 25');\nconst horizontalrSegment = new PathArray('C 25 0 25 0 25 0');\n\nexport const basicBlocks: pathLibrary = {\n  loopSegment,\n  reverseLoopSegment,\n  curveSegment45,\n  reverseCurveSegment45,\n  curveSegment90,\n  reverseCurveSegment90,\n  connectorSegment,\n  reverseConnectorSegment,\n  horizontalrSegment,\n};\n\n////////////////////////////////////////////////////////////////////////////////////\n// composite shapes\n////////////////////////////////////////////////////////////////////////////////////\nexport const loop = pathCompose([\n  curveSegment45,\n  loopSegment,\n  flipXY(reverseLoopSegment),\n  flipY(reverseCurveSegment45),\n]);\nexport const crest = pathCompose([curveSegment45, flipY(reverseCurveSegment45)], (l)=>l);\nexport const connector = pathCompose([connectorSegment, flipY(reverseConnectorSegment)]);\nexport const twistConnector = pathCompose([connectorSegment, reverseConnectorSegment]);\nexport const drop = pathCompose([\n  curveSegment90,\n  flipX(loopSegment),\n  small(small(horizontalrSegment)),\n  flipY(reverseLoopSegment),\n  flipY(reverseCurveSegment90),\n]);\n\nexport const compositeShapes: pathLibrary = {\n  loop,\n  crest,\n  connector,\n  twistConnector,\n  drop,\n};\n\nexport interface LoopyLineParams {\n  numElements: number;\n  variability: number;\n  smoothness: number;\n  baseRadius: number;\n}\n\nexport function loopyLine(params: LoopyLineParams): PathArray {\n  // TODO: make loopy line procedural\n  return pathCompose([\n    new PathArray(['M 0 0']),\n    small(flipY(crest)),\n    twistConnector,\n    small(loop),\n    big(flipY(loop)),\n    connector,\n  ]);\n}\n\n////////////////////////////////////////////////////////////////////////////////////\n// closed shapes\n////////////////////////////////////////////////////////////////////////////////////\n\nexport function nPointRadial(radialDistances: number[], smoothness: number=0.5): PathArray {\n  const offset = { x: 100, y: 100 };\n  let output = new PathArray(['M', offset.x, offset.y + radialDistances[0]]);\n  const numSegments = radialDistances.length;\n\n  for (let i = 1; i < radialDistances.length + 1; i++) {\n    const r = radialDistances[i % numSegments];\n    const deltaR = radialDistances[i % numSegments] - radialDistances[(i-1) % numSegments]\n    const controlpointLength = (Math.abs(deltaR) / r + .5)  * smoothness * r / numSegments * 2 * Math.PI\n    const x = r * Math.sin((i * 2 * Math.PI) / numSegments) + offset.x;\n    const y = r * Math.cos((i * 2 * Math.PI) / numSegments) + offset.y;\n    const dX = -Math.cos(i * 2 * Math.PI / numSegments) * controlpointLength;\n    const dY = Math.sin(i * 2 * Math.PI/ numSegments) * controlpointLength;\n    const controlPointX = x + dX;\n    const controlPointY = y + dY;\n\n    if (i === 1) {\n      output = output.concat([\n        'C',\n        controlpointLength + offset.x,\n        radialDistances[0] + offset.y,\n        controlPointX,\n        controlPointY,\n        x,\n        y,\n      ]) as PathArray;\n    } else {\n      output = output.concat(['S', controlPointX, controlPointY, x, y]) as PathArray;\n    }\n  }\n\n  output = output.concat(['z']) as PathArray;\n\n  return output;\n}\n\nexport interface ClosedPathParams {\n  numPoints: number;\n  variability: number;\n  smoothness: number;\n  baseRadius: number;\n}\n\nexport function closedPath(params: ClosedPathParams): PathArray {\n  const rng = seedrandom('seed string');\n  const oddNumberedBaseRadius = params.baseRadius - params.variability\n  const radii = new Array(params.numPoints);\n  for (let i = 0; i < params.numPoints; i++) {\n    const currentBaseRadius = i%2 === 0 ? params.baseRadius : oddNumberedBaseRadius\n    radii[i] = currentBaseRadius + (rng() - 0.5) * params.variability;\n  }\n  return nPointRadial(radii, params.smoothness);\n}\n\nexport const blob2 = nPointRadial([75, 75]);\nexport const blob3 = nPointRadial([75, 75, 20]);\nexport const blob4 = nPointRadial([75, 75, 20, 90]);\nexport const blob5 = nPointRadial([75, 75, 20, 100, 25]);\n\nexport const closedShapes: pathLibrary = {\n  blob2,\n  blob3,\n  blob4,\n  blob5,\n};\n","/* \nDefine a grammar for lines and write an interpreter \n\nCompose a line from a binary tree. Each node in the tree acts as a modifier applied to the concatenation of it's children.\n\nThe unit operator is allowed as a modifier.\n*/\n\nimport { PathArray } from '@svgdotjs/svg.js';\nimport { library, utils } from '.';\nimport { pathCompose } from './utils';\nimport seedrandom from 'seedrandom';\n\n\nexport type Line = PathArray;\nexport type ModifierFunc = (l: Line) => Line;\n\nexport enum NodeTypes {\n  MODIFIER,\n  ATOM,\n}\n\nexport interface ModifierNode {\n  type: NodeTypes.MODIFIER;\n  modifier: ModifierFunc;\n  children: Node[];\n}\n\nexport interface AtomNode {\n  type: NodeTypes.ATOM;\n  atom: Line;\n}\n\nexport type Node = AtomNode | ModifierNode;\n\nexport function isAtom(node: Node): node is AtomNode {\n  return node.type === NodeTypes.ATOM;\n}\n\nexport function isModifier(node: Node): node is ModifierNode {\n  return node.type === NodeTypes.MODIFIER;\n}\n\nexport function createNullAtom(): AtomNode {\n  return {\n    type: NodeTypes.ATOM,\n    atom: new PathArray(),\n  };\n}\n\nexport function evaluateTree(node: Node): Line {\n  if (isAtom(node)) return node.atom;\n  return node.modifier(pathCompose(node.children.map(evaluateTree)));\n}\n\nexport const modifierVocabulary: Record<string, ModifierFunc> = {\n  S: utils.small,\n  L: utils.big,\n  B: utils.bend,\n  // N: utils.noise,\n  F: (l) => utils.pathCompose([library.connector, utils.flipY(l)]),\n  I: (l) => l,\n};\n\n/* \nAtoms with starting points at 45deg and end points at -45deg. \nThese can be chained if one is flipped vertically\n*/\nconst symmetricAtoms: Record<string, Line> = {\n  a: library.loop,\n  b: library.crest,\n  c: library.connector,\n};\n\n/*\nTo construct atoms that are chanable without flipping, we can use the atoms from above. \nWe will generate all combinations.\n*/\nexport const atomVocabulary: Record<string, Line> = (() => {\n  const allAtoms: Record<string, Line> = {};\n  let counter = 0;\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  for (const key1 in symmetricAtoms) {\n    for (const key2 in symmetricAtoms) {\n      allAtoms[alphabet[counter]] = pathCompose([symmetricAtoms[key1], utils.flipY(symmetricAtoms[key2])]);\n      counter++;\n    }\n  }\n  return allAtoms;\n})();\n\n/* \nfor a tutoral on decoding trees see: https://en.wikipedia.org/wiki/Binary_tree#Succinct_encodings\n*/\nexport function decodePathString(input: string): Node {\n  let position = 0;\n  if (!input) return createNullAtom();\n\n  const tree = (function next(): Node | null {\n    const word = input[position++];\n    if (word && word in modifierVocabulary) {\n      const left = next() || createNullAtom();\n      const right = next() || createNullAtom();\n      const node: ModifierNode = {\n        type: NodeTypes.MODIFIER,\n        modifier: modifierVocabulary[word],\n        children: [left, right],\n      };\n\n      return node;\n    }\n    if (word && word in atomVocabulary) {\n      const node: AtomNode = {\n        type: NodeTypes.ATOM,\n        atom: atomVocabulary[word],\n      };\n\n      return node;\n    }\n\n    return null;\n  })();\n\n  if (tree === null) throw new Error('bad tree');\n\n  return tree;\n}\n\nexport function countNodes(node: Node): number {\n  if (isAtom(node)) return 1;\n  return node.children.map(countNodes).reduce((a, b) => a + b) + 1;\n}\n\nfunction choice<T>(arr: T[], seed?: string): T {\n  const rng = seedrandom(seed)\n  return arr[Math.floor(rng() * arr.length)]\n}\n\nexport function generateLinish(numModifiers: number): string {\n  const modifierSet = Object.keys(modifierVocabulary)\n  const atomSet = Object.keys(atomVocabulary)\n  let output = (function next(depth: number):string {\n    if(depth>=numModifiers) return choice(atomSet)\n    return choice(modifierSet) + next(depth+1) + next(depth+1)\n  })(0)\n  return output\n}","import { ShapeComponent, ShapeKind, ShapeProps } from '../../lib/shapelib';\nimport { decodePathString, evaluateTree } from '../../lib/shapelib/grammar';\nimport styles from './VariableLine.module.css';\n\ninterface VariableLineProps extends Partial<ShapeProps> {\n  pathString: string;\n}\n\nexport const VariableLine: React.FC<VariableLineProps & React.HTMLAttributes<HTMLElement>> = (props) => {\n  const {pathString, ...rest} = props\n  const tree = decodePathString(pathString);\n  const path = evaluateTree(tree);\n  return <ShapeComponent {...rest} path={path} kind={ShapeKind.LOOPY} className={styles.shape} fill=\"none\" />;\n};\n","import { Typography } from '@mui/material';\nimport { ReactNode } from 'react';\nimport { ShapeKind } from '../../lib/shapelib';\nimport { generateLinish } from '../../lib/shapelib/grammar';\nimport { VariableLine } from '../ShapeComponents/VariableLine';\nimport styles from './Hero.module.css';\n\ntype HeroProps = {\n  title: ReactNode;\n  subTitle: ReactNode;\n  buttons?: ReactNode;\n  lineColor?: string;\n};\n\nconst shapeProps = {\n  kind: ShapeKind.LOOPY,\n  complexity: 4,\n  stroke: { color: '#ff1b5f50', width: 5 },\n};\n\nexport const Hero = ({ title, subTitle, buttons = [], lineColor = shapeProps.stroke.color }: HeroProps) => {\n  const pathString = generateLinish(2)\n\n  shapeProps.stroke.color = lineColor;\n  return (\n    <div className={styles.heroOuterDiv}>\n      <VariableLine\n        {...shapeProps}\n        pathString={pathString}\n        style={{ position: 'absolute', maxWidth: '100%', marginTop: '-3em', zIndex: -1 }}\n      />\n      <div style={{ margin: '5em' }}>\n        <Typography variant=\"h1\">{title}</Typography>\n        <Typography variant=\"h2\">{subTitle}</Typography>\n        <>{buttons}</>\n      </div>\n    </div>\n  );\n};\n","import { Box, BoxProps } from '@mui/material';\n\nexport const Section = (props: BoxProps) => (\n  <Box\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    minHeight=\"60vh\"\n    maxWidth=\"1440px\"\n    margin=\"auto\"\n    padding=\"5rem 0 5rem 0\"\n    position='relative'\n    {...props}\n  />\n);\n","import { PathProps, ShapeComponent, ShapeKind, StyleProps } from '../../lib/shapelib';\nimport styles from './BackgroundBlob.module.css';\n\ntype BackgroundBlobProps = StyleProps & {\n  numPoints: number;\n};\n\nexport const BackgroundBlob: React.FC<BackgroundBlobProps> = (props) => {\n  const { numPoints, ...passThroughProps } = props;\n  const pathProps: PathProps= {\n    kind: ShapeKind.CLOSED,\n    complexity: numPoints,\n    variability: 50,\n    smoothness: .8\n  };\n\n  return (\n    <div className={styles.container}>\n      <ShapeComponent {...pathProps} {...passThroughProps} className={styles.shape} />\n      <div className={styles.contents}>{props.children}</div>\n    </div>\n  );\n};\n","import { Grid, Typography } from '@mui/material';\nimport { simpleLinearGradient } from '../../lib/shapelib/utils';\nimport { BackgroundBlob } from '../ShapeComponents/BackgroundBlob';\n\nconst Item: React.FC<{}> = (props) => <div style={{ padding: '3rem' }}>{props.children}</div>;\nconst baseColor = '#ff1b5f';\n\nexport const AccentBlobsExample = () => {\n  return (\n    <Grid container spacing={2}>\n      <Grid item xs={12}>\n      <div><Typography variant='h2'>Background shapes</Typography></div>\n\n      </Grid>\n      <Grid item xs={4}>\n        <BackgroundBlob numPoints={5} stroke={{ color: baseColor, width: 3, opacity: 0.6 }} fill=\"none\">\n          <Item>\n            <Typography variant=\"h4\">Outline only</Typography>\n            <Typography variant=\"body1\">Use small shapes in the background of text or other elements.</Typography>\n          </Item>\n        </BackgroundBlob>\n      </Grid>\n      <Grid item xs={4}>\n        <BackgroundBlob numPoints={7} stroke={'none'} fill={baseColor}>\n          <Item>\n            <Typography variant=\"h4\">Filled</Typography>\n            <Typography variant=\"body1\">\n              Shapes can be filled, have opacity and re-size with the foreground content.\n            </Typography>\n          </Item>\n        </BackgroundBlob>\n      </Grid>\n      <Grid item xs={4}>\n        <BackgroundBlob\n          numPoints={10}\n          stroke={'none'}\n          fill={simpleLinearGradient([baseColor.concat('65'), baseColor], 90)}\n        >\n          <Item>\n            <Typography variant=\"h4\">Gradient</Typography>\n            <Typography variant=\"body1\">\n              Shapes can be filled, have opacity and re-size with the foreground content.\n            </Typography>\n          </Item>\n        </BackgroundBlob>\n      </Grid>\n    </Grid>\n  );\n};\n","import {  Typography } from '@mui/material';\nimport { ReactNode } from 'react';\n\ntype TextBlockProps = {\n  title: ReactNode,\n}\n\nexport const TextBlock:React.FC<TextBlockProps> = (props) => {\n  return (\n    <div style={{display:'block'}}>\n    <Typography variant='h2'>{props.title}</Typography>\n    <Typography variant='body1'>{props.children}</Typography>\n    </div>\n  );\n};\n","import { ShapeComponent, ShapeKind, ShapeProps } from \"../../lib/shapelib\";\nimport styles from './SideBlob.module.css'\n\nexport const SideBlob: React.FC<Partial<ShapeProps>> = props => (\n    <ShapeComponent \n    {...props} \n    kind={ShapeKind.CLOSED}\n    complexity={7}\n    variability={50} \n    className={styles.sideblob} \n    stroke=\"none\"\n    fill=\"#bbb3\"\n    />\n)","import React from 'react';\nimport styles from './App.module.css';\nimport { Header } from '../Header';\nimport { Footer } from '../Footer';\nimport { Hero } from '../Hero';\nimport { Section } from '../Section';\nimport { AccentBlobsExample } from '../AccentBlobsExample';\nimport { TextBlock } from '../TextBlock';\nimport { SideBlob } from '../ShapeComponents/SideBlob';\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Header />\n      <Section>\n        <Hero\n          title={<>Instant Unique Brand</>}\n          subTitle={\n            <>\n              Beautiful procedurally generated shapes <br /> for your websites\n            </>\n          }\n        />\n      </Section>\n      <Section >\n        <AccentBlobsExample />\n      </Section>\n      <Section >\n        <SideBlob/>\n        <TextBlock title=\"Text Block\">\n          This is a text block body text.\n        </TextBlock>\n      </Section>\n      <Footer />\n    </div>\n    // </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createTheme } from '@mui/material/styles';\n\nexport const theme = createTheme({\n  typography: {\n    h1: {\n      fontSize: '5rem',\n    },\n    h2: {\n      fontSize: '3rem',\n    },\n    body1:{\n      fontSize: '1.2rem'\n    }\n  },\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: '#ff4400',\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#0044ff',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport { ThemeProvider } from '@mui/material/styles';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}